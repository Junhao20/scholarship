cv_one_step <- ts_indeed %>%
stretch_tsibble(.init = 365, .step = 1) %>%  # Expand window, step forward by 1 day
model(
ARIMA_020 = ARIMA(value ~ pdq(0,2,0) + PDQ(1,1,1) + season(7)),
ARIMA_322 = ARIMA(value ~ pdq(3,2,2) + PDQ(1,0,1) + season(7))
) %>%
forecast(h = 1) %>%  # One-step ahead forecast
accuracy(ts_indeed)
print(cv_one_step)
library(fpp3)
cv_one_step <- ts_indeed %>%
stretch_tsibble(.init = 365, .step = 1) %>%
model(
ARIMA_020 = ARIMA(value ~ pdq(0,2,0) + PDQ(1,1,1) + season(7) + 1),  # Explicitly include constant
ARIMA_322 = ARIMA(value ~ pdq(3,2,2) + PDQ(1,0,1) + season(7) + 1)   # Explicitly include constant
) %>%
forecast(h = 1) %>%
accuracy(ts_indeed)
library(fpp3)
library(forecast)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
ts_ai <- ts(df$value, frequency = 7, start = c(as.numeric(format(min(df$date), "%Y")), as.numeric(format(min(df$date), "%j"))/7))
fit_arima311 <- Arima(ts_ai, order = c(3,1,1))
fit_sarima114 <- Arima(ts_ai, order = c(1,1,4), seasonal = list(order = c(0,0,1), period = 12))
accuracy_arima311 <- accuracy(fit_arima311)
accuracy_sarima114 <- accuracy(fit_sarima114)
model_comparison <- data.frame(
Model = c("ARIMA(3,1,1)", "ARIMA(1,1,4)(0,0,1)[12]"),
AIC = c(fit_arima311$aic, fit_sarima114$aic),
BIC = c(fit_arima311$bic, fit_sarima114$bic),
RMSE = c(accuracy_arima311[nrow(accuracy_arima311), "RMSE"],
accuracy_sarima114[nrow(accuracy_sarima114), "RMSE"]),
MAPE = c(accuracy_arima311[nrow(accuracy_arima311), "MAPE"],
accuracy_sarima114[nrow(accuracy_sarima114), "MAPE"])
)
print(model_comparison)
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
ts_ai <- ts(df$value, frequency = 7, start = c(as.numeric(format(min(df$date), "%Y")), as.numeric(format(min(df$date), "%j"))/7))
s <- 12
len <- length(ts_ai)
st <- tsp(ts_ai)[1] + (s-1)/s
one_step_forecasts <- vector("numeric", len-s)
s_step_forecasts <- vector("numeric", len-s)
actuals <- vector("numeric", len-s)
for (i in 1:(len - s)) {
model <- Arima(window(ts_ai, end = st + i + s - 1),
order = c(1,1,4),
seasonal = list(order = c(0,0,1), period = 12))
one_step_forecasts[i] <- forecast(model, h=1)$mean
s_step_forecasts[i] <- forecast(model, h=s)$mean[s]
actuals[i] <- ts_ai[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_ai <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 12
len <- length(ts_ai)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
train_data <- window(ts_ai, end = time(ts_ai)[i + s - 1])
model <- Arima(train_data, order = c(1,1,4), seasonal = list(order = c(0,0,1), period = 12))
one_step_forecasts[i] <- forecast(model, h=1)$mean
s_step_forecasts[i] <- forecast(model, h=s)$mean[s]
actuals[i] <- ts_ai[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_indeed <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 7
len <- length(ts_indeed)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
train_data <- window(ts_indeed, end = time(ts_indeed)[i + s - 1])
model <- Arima(train_data, order = c(1,1,4), seasonal = list(order = c(0,0,1), period = 7))
one_step_forecasts[i] <- forecast(model, h=1)$mean
s_step_forecasts[i] <- forecast(model, h=s)$mean[s]
actuals[i] <- ts_indeed[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_indeed <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 7
len <- length(ts_indeed)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
train_data <- window(ts_indeed, end = time(ts_indeed)[i + s - 1])
# Force stationarity by setting `stationary=TRUE`
model <- Arima(train_data, order = c(1,1,4), seasonal = list(order = c(0,0,1), period = 7),
method = "ML", include.constant = FALSE)
one_step_forecasts[i] <- forecast(model, h=1)$mean
s_step_forecasts[i] <- forecast(model, h=s)$mean[s]
actuals[i] <- ts_indeed[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_indeed <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 7
len <- length(ts_indeed)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
train_data <- window(ts_indeed, end = time(ts_indeed)[i + s - 1])
# Force stationarity by setting `stationary=TRUE`
model <- Arima(train_data, order = c(0,2,0), seasonal = list(order = c(1,1,1), period = 7),
method = "ML", include.constant = FALSE)
one_step_forecasts[i] <- forecast(model, h=1)$mean
s_step_forecasts[i] <- forecast(model, h=s)$mean[s]
actuals[i] <- ts_indeed[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_indeed <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 7
len <- length(ts_indeed)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
train_data <- window(ts_indeed, end = i + s - 1)  # Adjusted indexing
# Ensuring stationarity & better parameter estimation
model <- Arima(train_data, order = c(0,2,0), seasonal = list(order = c(1,1,1), period = 7),
method = "ML", include.constant = FALSE)
one_step_forecasts[i] <- forecast(model, h=1)$mean[1]  # Ensure correct indexing
s_step_forecasts[i] <- forecast(model, h=s)$mean[min(s, length(forecast(model, h=s)$mean))]  # Safe index
actuals[i] <- ts_indeed[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_indeed <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 7
len <- length(ts_indeed)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
# Ensure the window is valid
if (i + s - 1 > len) {
break  # Prevents invalid indexing
}
train_data <- window(ts_indeed, end = time(ts_indeed)[i + s - 1])
# Fit SARIMA model
model <- Arima(train_data, order = c(0,2,0), seasonal = list(order = c(1,1,1), period = 7),
method = "ML", include.constant = FALSE)
one_step_forecasts[i] <- forecast(model, h=1)$mean[1]
s_step_forecasts[i] <- forecast(model, h=s)$mean[min(s, length(forecast(model, h=s)$mean))]
actuals[i] <- ts_indeed[i + s]
}
library(forecast)
library(lubridate)
s <- 7
len <- length(ts_indeed)
st <- tsp(ts_indeed)[1] + (s-1)/s
one_step_forecasts <- vector("numeric", len-s)
s_step_forecasts <- vector("numeric", len-s)
actuals <- vector("numeric", len-s)
for (i in 1:(len - s)) {
model <- Arima(window(ts_ai, end = st + i + s - 1),
order = c(0,2,0),
seasonal = list(order = c(1,1,1), period = 7))
one_step_forecasts[i] <- forecast(model, h=1)$mean
s_step_forecasts[i] <- forecast(model, h=s)$mean[s]
actuals[i] <- ts_ai[i + s]
}
library(forecast)
library(lubridate)
df <- read.csv("indeed.csv")
colnames(df) <- c("date", "value")
df$date <- seq(as.Date("2020-01-01"), by = "day", length.out = nrow(df))
ts_indeed <- ts(df$value, frequency = 7, start = c(year(min(df$date)), yday(min(df$date))/7))
s <- 7
len <- length(ts_indeed)
one_step_forecasts <- numeric(len - s)
s_step_forecasts <- numeric(len - s)
actuals <- numeric(len - s)
for (i in 1:(len - s)) {
# Ensure we have enough data points
if (i + s - 1 > len || i < 10) {  # Ensure minimum 10 data points
next
}
train_data <- window(ts_indeed, end = time(ts_indeed)[i + s - 1])
if (length(train_data) < 10) {  # Avoid fitting models with very few observations
next
}
model <- Arima(train_data, order = c(0,2,0), seasonal = list(order = c(1,1,1), period = 7),
method = "ML", include.constant = FALSE)
one_step_forecasts[i] <- forecast(model, h=1)$mean[1]
s_step_forecasts[i] <- forecast(model, h=s)$mean[min(s, length(forecast(model, h=s)$mean))]
actuals[i] <- ts_indeed[i + s]
}
# Compute errors safely
valid_indices <- which(!is.na(one_step_forecasts) & !is.na(s_step_forecasts) & !is.na(actuals))
one_step_errors <- actuals[valid_indices] - one_step_forecasts[valid_indices]
s_step_errors <- actuals[valid_indices] - s_step_forecasts[valid_indices]
# Compute accuracy metrics
one_step_mae <- mean(abs(one_step_errors), na.rm = TRUE)
one_step_rmse <- sqrt(mean(one_step_errors^2, na.rm = TRUE))
s_step_mae <- mean(abs(s_step_errors), na.rm = TRUE)
s_step_rmse <- sqrt(mean(s_step_errors^2, na.rm = TRUE))
results <- data.frame(
Metric = c("1-Step MAE", "1-Step RMSE", "7-Step MAE", "7-Step RMSE"),
Value = c(one_step_mae, one_step_rmse, s_step_mae, s_step_rmse)
)
print(results)
#| vscode: {languageId: r}
# IMPORT LIBRARIES
library(ISLR)
library(gam)
install.packages("gam")
shiny::runApp('Desktop/scholarship/app2')
runApp('Desktop/scholarship/app2')
rsconnect::deployApp("risk_analysis")
setwd("~/Desktop/scholarship/app2")
rsconnect::setAccountInfo(name='scholarshipdsan',
token='C379B7A9161025263353A263E06FEC5F',
secret='ny4iNkzxp95C5gp8lCKhNxL/21998wz48yfRbY/T')
rsconnect::deployApp('app2')
rsconnect::deployApp()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(readxl)
library(imputeTS)
##### Data Cleaning #########
covid_new = read.csv("covid_usa_Vacc_new.csv") %>% select(date,new_cases,new_vaccinations)
##### Data Cleaning #########
covid_new = read.csv("data/covid_usa_Vacc_new.csv") %>% select(date,new_cases,new_vaccinations)
covid_new$date = as.Date(covid_new$date, format ="%Y-%m-%d")
#replace 0's with nas
covid_new$new_cases[covid_new$new_cases==0] = NA
####################################################################################
###### we have to convert the series into time series before using imputation #######
covid.dat.ts = ts(covid_new,star =decimal_date(as.Date("2020-12-14",
format ="%Y-%m-%d")),
frequency = 365.25)
#Missing Value Imputation by Last Observation Carried Forward
covid.dat.ts[,"new_cases"] = na_locf(covid.dat.ts[,"new_cases"],option = 'locf',na_remaining="rev")
library(tidyverse)
library(lubridate)
covid_new <- read.csv("data/COVID_usa_Vacc_new.csv") %>%
select(date, new_cases, new_vaccinations)
covid_new$date <- as.Date(covid_new$date, format = "%Y-%m-%d")
covid_new$new_cases[covid_new$new_cases == 0] <- NA
library(zoo)
covid_new$new_cases <- na.locf(covid_new$new_cases, option = "locf", na.rm = FALSE)
library(tidyverse)
library(lubridate)
library(zoo)
covid_new <- read.csv("data/COVID_usa_Vacc_new.csv") %>%
select(date, new_cases, new_vaccinations)
covid_new$date <- as.Date(covid_new$date, format = "%Y-%m-%d")
covid_new$new_cases[covid_new$new_cases == 0] <- NA
covid_new$new_cases <- na.locf(covid_new$new_cases, option = "locf")
covid_new$new_cases <- na.locf(covid_new$new_cases, fromLast = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
covid.dat.ts %>%
as.data.frame() %>%
mutate(date = time(covid.dat.ts)) %>%
pivot_longer(cols = c(new_cases, new_vaccinations), names_to = "Metric", values_to = "Value") %>%
ggplot(aes(x = date, y = Value)) +
geom_line() +
facet_wrap(~Metric, scales = "free_y") +
labs(title = "New Cases vs New Vaccinations (Original Scale)", x = "Date", y = "Value")
log_cases <- log1p(covid.dat.ts[, "new_cases"])
log_vacc  <- log1p(covid.dat.ts[, "new_vaccinations"])
covid.log.ts <- ts(cbind(log_new_cases = log_cases, log_new_vaccinations = log_vacc),
start = start(covid.dat.ts), frequency = frequency(covid.dat.ts))
as.data.frame(covid.log.ts) %>%
mutate(date = time(covid.log.ts)) %>%
pivot_longer(cols = everything(), names_to = "Metric", values_to = "Log_Value") %>%
ggplot(aes(x = date, y = Log_Value)) +
geom_line() +
facet_wrap(~Metric, scales = "free_y") +
labs(title = "Log-Transformed New Cases and New Vaccinations", x = "Date", y = "Log(Value + 1)")
log_cases <- log1p(covid.dat.ts[, "new_cases"])
log_vacc  <- log1p(covid.dat.ts[, "new_vaccinations"])
covid.log.ts <- ts(cbind(log_new_cases = log_cases, log_new_vaccinations = log_vacc),
start = start(covid.dat.ts), frequency = frequency(covid.dat.ts))
as.data.frame(covid.log.ts) %>%
mutate(time = as.numeric(time(covid.log.ts))) %>%
pivot_longer(cols = everything(), names_to = "Metric", values_to = "Log_Value") %>%
ggplot(aes(x = time, y = Log_Value)) +
geom_line() +
facet_wrap(~Metric, scales = "free_y") +
labs(title = "Log-Transformed New Cases and New Vaccinations", x = "Time", y = "Log(Value + 1)")
log_cases <- log1p(covid.dat.ts[, "new_cases"])
log_vacc <- log1p(covid.dat.ts[, "new_vaccinations"])
covid.log.ts <- ts(cbind(log_new_cases = log_cases, log_new_vaccinations = log_vacc),
start = start(covid.dat.ts), frequency = frequency(covid.dat.ts))
df_q2 <- data.frame(
time = time(covid.log.ts),
log_new_cases = covid.log.ts[, "log_new_cases"],
log_new_vaccinations = covid.log.ts[, "log_new_vaccinations"]
) %>%
pivot_longer(cols = everything(), -time, names_to = "Metric", values_to = "Value")
log_cases <- log1p(covid.dat.ts[, "new_cases"])
log_vacc <- log1p(covid.dat.ts[, "new_vaccinations"])
covid.log.ts <- ts(cbind(log_new_cases = log_cases, log_new_vaccinations = log_vacc),
start = start(covid.dat.ts), frequency = frequency(covid.dat.ts))
df_q2 <- data.frame(
time = time(covid.log.ts),
log_new_cases = covid.log.ts[, "log_new_cases"],
log_new_vaccinations = covid.log.ts[, "log_new_vaccinations"]
) %>%
pivot_longer(cols = -time, names_to = "Metric", values_to = "Value")
ggplot(df_q2, aes(x = time, y = Value)) +
geom_line() +
facet_wrap(~Metric, scales = "free_y") +
labs(title = "Log-Transformed New Cases and New Vaccinations", x = "Time", y = "Log(Value + 1)")
# As the requirement, we fit the regression model first
model_lm <- tslm(log_new_cases ~ log_new_vaccinations, data = covid.log.ts)
summary(model_lm)
library(forecast)
fit_arimax_manual <- Arima(
covid.log.ts[, "log_new_cases"],
order = c(2, 1, 2),
xreg = covid.log.ts[, "log_new_vaccinations"]
)
summary(fit_arimax_manual)
res.fit <- residuals(fit_arimax_manual)
res.fit <- ts(res.fit, start = start(covid.log.ts), frequency = frequency(covid.log.ts))
ggAcf(res.fit, lag.max = 40) +
ggtitle("ACF Plot of Residuals from ARIMAX Model")
res.diff1 <- diff(res.fit, differences = 1)
res.diff2 <- diff(res.fit, differences = 2)
# First Difference
ggAcf(res.diff1, lag.max = 30) + ggtitle("ACF - First Differenced Residuals")
ggPacf(res.diff1, lag.max = 30) + ggtitle("PACF - First Differenced Residuals")
# Second Difference
ggAcf(res.diff2, lag.max = 30) + ggtitle("ACF - Second Differenced Residuals")
ggPacf(res.diff2, lag.max = 30) + ggtitle("PACF - Second Differenced Residuals")
library(patchwork)
res.diff1 <- diff(res.fit, differences = 1)
res.diff2 <- diff(res.fit, differences = 2)
# First Difference
fig_d1 <- ggAcf(res.diff1, lag.max = 30) + ggtitle("ACF - First Differenced Residuals")
fig_d1_p <- ggPacf(res.diff1, lag.max = 30) + ggtitle("PACF - First Differenced Residuals")
# Second Difference
fig2_d2 <- ggAcf(res.diff2, lag.max = 30) + ggtitle("ACF - Second Differenced Residuals")
fig2_d2_p <- ggPacf(res.diff2, lag.max = 30) + ggtitle("PACF - Second Differenced Residuals")
fig_d1 / fig_d1_p
fig2_d2 / fig2_d2_p
auto_model <- auto.arima(
covid.log.ts[, "log_new_cases"],
xreg = covid.log.ts[, "log_new_vaccinations"]
)
summary(auto_model)
library(forecast)
library(dplyr)
# Initialize storage
results <- data.frame()
# Try combinations of p, d, q
for (p in 0:3) {
for (d in 1:2) {
for (q in 0:3) {
tryCatch({
fit <- Arima(res.fit, order = c(p, d, q))
results <- rbind(results, data.frame(
p = p,
d = d,
q = q,
AIC = fit$aic,
BIC = fit$bic,
AICc = fit$aicc
))
}, error = function(e) {
cat("Failed for (", p, d, q, ")\n")
})
}
}
}
# Get best models
best_aic <- results[which.min(results$AIC), ]
best_bic <- results[which.min(results$BIC), ]
best_aicc <- results[which.min(results$AICc), ]
# Print outputs
print(best_aic)
print(best_bic)
print(best_aicc)
# Load needed libraries
library(forecast)
library(tseries)
# Fit both models
model_313 <- Arima(log1p(covid.dat.ts[, "new_cases"]), order = c(3, 1, 3))
model_312 <- Arima(log1p(covid.dat.ts[, "new_cases"]), order = c(3, 1, 2))
# Save printed output for each model
model_output1 <- capture.output({
print(summary(model_313))
checkresiduals(model_313)
})
model_output2 <- capture.output({
print(summary(model_312))
checkresiduals(model_312)
})
library(forecast)
# Set up storage for errors
n <- length(log1p(covid.dat.ts[, "new_cases"]))
k <- 220
errors_312 <- c()
errors_313 <- c()
for (i in k:(n - 1)) {
train_data <- log1p(covid.dat.ts[1:i, "new_cases"])
test_data <- log1p(covid.dat.ts[i + 1, "new_cases"])
# Model 1: ARIMA(3,1,2)
fit_312 <- Arima(train_data, order = c(3, 1, 2))
pred_312 <- forecast(fit_312, h = 1)$mean
errors_312 <- c(errors_312, test_data - pred_312)
# Model 2: ARIMA(3,1,3)
fit_313 <- Arima(train_data, order = c(3, 1, 3))
pred_313 <- forecast(fit_313, h = 1)$mean
errors_313 <- c(errors_313, test_data - pred_313)
}
library(forecast)
# Log-transform the new_cases series
log_cases <- log1p(covid.dat.ts[, "new_cases"])
# Set cross-validation parameters
n <- length(log_cases)
k <- 220
errors_312 <- c()
errors_313 <- c()
# Rolling forecast origin loop
for (i in k:(n - 1)) {
train_data <- log_cases[1:i]
test_data <- log_cases[i + 1]
# ARIMA(3,1,2)
fit_312 <- Arima(train_data, order = c(3, 1, 2), method = "ML")
pred_312 <- forecast(fit_312, h = 1)$mean
errors_312 <- c(errors_312, test_data - pred_312)
# ARIMA(3,1,3)
fit_313 <- Arima(train_data, order = c(3, 1, 3), method = "ML")
pred_313 <- forecast(fit_313, h = 1)$mean
errors_313 <- c(errors_313, test_data - pred_313)
}
# Compute RMSE
rmse_312 <- sqrt(mean(errors_312^2))
rmse_313 <- sqrt(mean(errors_313^2))
# Report results
cat("RMSE for ARIMA(3,1,2):", rmse_312, "\n")
cat("RMSE for ARIMA(3,1,3):", rmse_313, "\n")
final_model <- Arima(log1p(covid.dat.ts[, "new_cases"]), order = c(3, 1, 2))
summary(final_model)
library(forecast)
vacc_model <- auto.arima(log1p(covid.dat.ts[, "new_vaccinations"]))
fvac <- forecast(vacc_model, h = 14)
fvac
fc_cases <- forecast(final_model, xreg = fvac$mean, h = 14)
autoplot(fc_cases) +
ggtitle("Forecasted New COVID-19 Cases Using ARIMA(3,1,2) with Vaccination Forecasts") +
ylab("log(New Cases + 1)") +
xlab("Time")
# ARIMAX model with vaccination
arimax_model <- Arima(log1p(covid.dat.ts[, "new_cases"]),
order = c(3, 1, 2),
xreg = log1p(covid.dat.ts[, "new_vaccinations"]))
# ARIMA model without vaccination
arima_model <- Arima(log1p(covid.dat.ts[, "new_cases"]),
order = c(3, 1, 2))
# Print AIC & BIC for both
cat("ARIMAX (with vaccination):\n")
cat("  AIC:", AIC(arimax_model), "\n")
cat("  BIC:", BIC(arimax_model), "\n\n")
cat("ARIMA (without vaccination):\n")
cat("  AIC:", AIC(arima_model), "\n")
cat("  BIC:", BIC(arima_model), "\n")
